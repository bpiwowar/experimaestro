import java.nio.file.Files

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'idea'

description = 'Experimaestro helper package'
sourceCompatibility = 1.8
targetCompatibility = 1.8


task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

def jnidir = project.buildDir.toPath().resolve("jni")
def javaSource = jnidir.resolve("src/main/java")


task buildJNI << {
    description = "Builds the JNI"

    // Creates directory
    Files.createDirectories(jnidir)

    def sourceDir = project.projectDir.toPath().resolve("../..").normalize()

    exec {
        executable "/usr/local/bin/cmake"
        workingDir jnidir.toFile()

        args sourceDir.toString()
    }
    exec {
        executable "make"
        workingDir jnidir.toFile()

        args "experimaestro_java"
    }
}

compileJava {
    dependsOn buildJNI
    def jniSources = files { javaSource.toFile().listFiles() }
    source += jniSources
}


idea {
    module {
        sourceDirs += javaSource.toFile()
    }
}

artifacts {
    archives javadocJar, sourcesJar
}

signing {
    // Skip signing snapshot archives or travis builds
    if (System.env.TRAVIS || version.endsWith("-SNAPSHOT")) return
    sign configurations.archives
}

group = "net.bpiwowar"
archivesBaseName = "experimaestro-helper"
version = "1.0.0-SNAPSHOT"

def ossrhUsername = hasProperty("ossrhUsername") ? ossrhUsername : null
def ossrhPassword = hasProperty("ossrhPassword") ? ossrhPassword : null


uploadArchives {
    if (System.env.TRAVIS && !version.endsWith("-SNAPSHOT")) return

    repositories {
        mavenDeployer {
            beforeDeployment {
                MavenDeployment deployment ->
                    if (!version.endsWith("-SNAPSHOT")) {
                        signing.signPom(deployment)
                    }
            }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            pom.project {
                name 'Experimaestro JAVA library'
                packaging 'jar'
                // optionally artifactId can be defined here
                description 'Experimaestro package that is used to define tasks with annotations.'
                url 'http://experimaestro.readthedocs.org/en/latest/'

                scm {
                    connection 'scm:svn:https://github.com/bpiwowar/experimaestro.git'
                    developerConnection 'scm:git:https://github.com/bpiwowar/experimaestro.git'
                    url 'https://github.com/bpiwowar/experimaestro'
                }

                licenses {
                    license {
                        name 'The Apache License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id 'bpiwowar'
                        name 'Benjamin Piwowarski'
                        email 'benjamin@bpiwowar.net'
                    }
                }
            }
        }
    }
}
