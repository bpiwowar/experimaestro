NOTES ABOUT XPMANAGER

This document contains notes about the XPManager architecture

There are two parts in this software
(PART 1) The resource manager 
(PART 2) The experiment manager

The resource manager is independent (in the sense that it can be used standalone) from the second part, that deals 
with parameters, etc.

// --------------- 
// --------------- PART I: Job manager
// --------------- 


--- FILE BASED ---
------------------

Everything should be file-based (no database, except for not being too much memory dependent at run time)

Organisation is flexible (in the sense that the structure can be hierachic or not, and can be modified by the user).

We have a main directory where main actions are logged, and where the database about completed tasks, etc. is stored:
- ${DIR}/db
- ${DIR}/jobs  A file that contains all the paths to completed jobs
- ${DIR}/data  A file that contains all the paths to generated data

Every resource (see below) has a unique ID which is a path to a directory containing information about the job

Based on the file ${FILE}
- ${FILE}.lock     locks the write access to the status (can also be used as an exclusive lock to the resource)
- ${FILE}.status   (optional) contains the PID of the running process (two columns PID MODE) where MODE is rw, r, w
- ${FILE}.done     created when the job was successfully executed
- ${FILE}.log.err  contains the error log output
- ${FILE}.log.std  contains the standard log output

--- RESOURCES ---
-----------------

We have the following types of resources:
- DATA:   the output of one job (one job can have several outputs); data can also be already generated by an external process (e.g. a data collection).
- TASK  
	- JOB:    a task to be run, that produces a given set of resources.
	- SERVER: a task that need to be run; however, we don't wait for the server run to complete
 
Data objects can be updated 

Constraints:
- a TASK resource may depend on several JOB, DATA and SERVER resources.
- a DATA resource may be updated by a TASK, in which case the DATA is both input and output of the TASK
- a DATA or SERVER resource may be locked read-only, or read-write (the underlying behaviour depends on what the DATA/SERVER allows) 


// --------------- 
// --------------- PART II: Javascript (and other backend) based construction of experiments
// --------------- 

- ${FILE}.params   contains the parameters (incl. inherited)
- ${FILE}.options  contains the set of options  
- ${FILE}.spec     contains the specifications of the object  


--- DATA ---
------------

Generated data can have meta informations

--- PARAMETERS ---
------------------

Experimental parameters values are transmitted. Parameters are fully qualified names "job-id.param-id" unless otherwise specified.
The goal was to avoid hierachies of parameters, so that the parameter file is a simple line based, tab separated, with 

--- PARAMETERS DEFAULT VALUE ---
--------------------------------

There should be a mechanism to update the data definition

--- GROUPS ---
--------------

One should allow to set a group for a set of experiments (could even be a qualified name)
example: I run several series of experiment and call them "trec.test1", "trec.test2"
I can then operate on the group "trec" or on more specific groups "trec.test1", etc...

