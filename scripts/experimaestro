#!/usr/bin/python

import os.path
import sys
import subprocess
import argparse
import string
import xmlrpclib
import logging      


# --- Set some variables

dir=os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
version="0.0.1-SNAPSHOT"
jarname="experimaestro-%s.jar" % version

logging.basicConfig(level=logging.INFO)

# --- Check paths

def jarpaths():
    """Returns the different paths where the JAR file can be located"""
    yield os.path.join(dir, jarname)
    yield os.path.join(dir, "target", "experimaestro-%s-bin" % version, jarname)

def start_jar(args, jarargs):
    # Check what if we start using maven
    mvnFile = os.path.join(dir, "pom.xml")
    if not os.path.exists(mvnFile): mvnFile = None

    if args.maven or mvnFile is not None:
      logging.info("Starting with maven")
      command = ["mvn", "exec:java", "-Dexec.mainClass=bpiwowar.experiments.Run"] 
      if mvnFile is not None: 
        command.append("--file")
        command.append(mvnFile)
      jarargs = [arg for arg in jarargs]
      command.append("-Dexec.args=%s" % string.join(jarargs, " "))

    else:
        jarpath = None
        for f in jarpaths():
            print "Trying %s" % f
            if os.path.isfile(f):
                jarpath = f
                break

        if jarpath is None: raise Exception("Could not find experimaestro jar file")
        command = ["java","-Xmx1g","-jar",jarpath] + jarargs

    # print command
    logging.debug('Runnig command %s' % command)
    subprocess.call(command)

def getProperties(filename):
   """Get a dictionnary from a property file
   """
   propFile= file(filename, "rU" )

   # Set some default values
   propDict= dict()
   propDict["url"] = "http://localhost:8080"
   
   # Read the properties
   for propLine in propFile:
      propDef= propLine.strip()
      if len(propDef) == 0:
         continue
      if propDef[0] in ( '!', '#' ):
         continue
      punctuation= [ propDef.find(c) for c in ':= ' ] + [ len(propDef) ]
      found= min( [ pos for pos in punctuation if pos != -1 ] )
      name= propDef[:found].rstrip()
      value= propDef[found:].lstrip(":= ").rstrip()
      propDict[name]= value
   propFile.close()
   return propDict


def getServer(args):
    # Get the configuration
    configfile=os.path.expanduser(args.config)
    
    # Initialise the server
    config = getProperties(configfile)
    url = config["url"]
    xmlrpc = xmlrpclib.ServerProxy(url, verbose=False)
    return xmlrpc

# --- Server

def command_server_start(args):
    start_jar(args, ["server"])

def command_server_stop(args):
    server = getServer(args)
    server.Server.shutdown();

def command_run_js(args):
    xmlrpc = getServer(args)

    env=[]
    for key,value in os.environ.iteritems():
       env.append([key,value])

    # Get the command line
    for filename in args.files:
        filename=os.path.abspath(filename)
        logging.info("Running JS script %s" % filename)
        try:
          r = xmlrpc.Server.runJSScript(True, filename, env)
          if len(r) >2:
            for line in r[2]:
              print line
          if r[0]:
              print
              print "### Error while running %s ###" % filename
              print r[1]
              sys.exit(r[0])
              print
        except xmlrpclib.Fault as e:
            print e
            sys.exit(1)
        except Exception as e:
            print e
            sys.exit(1)     

# --- Run command


# create the top-level parser
parser = argparse.ArgumentParser(description='experimaestro script.')
subparsers = parser.add_subparsers(help='sub-command help', dest='command')
parser.set_defaults(dir=dir)
parser.add_argument("--log", dest="loglevel", action="store", help="Log level", \
  choices = ["debug", "info", "warn"], default="info")
parser.add_argument("--maven", dest="maven", action="store_true", help="Force starts using maven")
parser.add_argument("--config", dest="config", default="~/.experimaestro", action="store", \
  help="Experimaestro configuration file")

subparser = subparsers.add_parser("start-server", help="Start the experimaestro server")
subparser.set_defaults(func=command_server_start)

subparser = subparsers.add_parser("stop-server", help="Stop the experimaestro server")
subparser.set_defaults(func=command_server_stop)

p_run_js = subparsers.add_parser("run-js", help="Run JavaScript script in server")
p_run_js.add_argument("--post", dest="post", help="Execute this javascript after the files")
p_run_js.set_defaults(func = command_run_js)
p_run_js.add_argument('files', nargs='*', help='') 

# Parse arguments
args = parser.parse_args()

numeric_level = getattr(logging, args.loglevel.upper(), None)
if not isinstance(numeric_level, int):
    raise ValueError('Invalid log level: %s' % loglevel)

try: args.func(args)
except Exception as e:
  print e
  sys.exit(1)
