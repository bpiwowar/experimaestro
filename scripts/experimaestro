#!/usr/bin/python

import os.path
import sys
import subprocess
import argparse
import string
import xmlrpclib
import logging
from icolor import cformat

# --- Set some variables

dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
version = "0.0.1-SNAPSHOT"
jarname = "experimaestro-%s.jar" % version

logging.basicConfig(level=logging.INFO)

# --- Check paths


def jarpaths():
    """Returns the different paths where the JAR file can be located"""
    yield os.path.join(dir, jarname)
    yield os.path.join(dir, "target", "experimaestro-%s-bin" % version, jarname)


def start_jar(args, jarargs):
    # Check what if we start using maven
    mvnFile = os.path.join(dir, "pom.xml")
    if not os.path.exists(mvnFile):
        mvnFile = None

    if args.maven or mvnFile is not None:
        logging.info("Starting with maven")
        command = ["mvn", "exec:java", "-Dexec.mainClass=bpiwowar.experiments.Run"]
        if mvnFile is not None:
            command.append("--file")
            command.append(mvnFile)
        jarargs = [arg for arg in jarargs]
        command.append("-Dexec.args=%s" % string.join(jarargs, " "))

    else:
        jarpath = None
        for f in jarpaths():
            print "Trying %s" % f
            if os.path.isfile(f):
                jarpath = f
                break

        if jarpath is None:
            raise Exception("Could not find experimaestro jar file")
        command = ["java", "-Xmx1g", "-jar", jarpath] + jarargs

    # print command
    logging.debug('Runnig command %s' % command)
    subprocess.call(command)


def getProperties(filename):
    """Get a dictionnary from a property file
   """
    propFile = file(filename, "rU")

    # Set some default values
    propDict = dict()
    propDict["url"] = "http://localhost:8080"

    # Read the properties
    for propLine in propFile:
        propDef = propLine.strip()
        if len(propDef) == 0:
            continue
        if propDef[0] in ('!', '#'):
            continue
        punctuation = [propDef.find(c) for c in ':= '] + [len(propDef)]
        found = min([pos for pos in punctuation if pos != -1])
        name = propDef[:found].rstrip()
        value = propDef[found:].lstrip(":= ").rstrip()
        propDict[name] = value
    propFile.close()
    return propDict


def getServer(args):
    # Get the configuration
    configfile = os.path.expanduser(args.config)

    # Initialise the server
    config = getProperties(configfile)
    url = config["url"]
    xmlrpc = xmlrpclib.ServerProxy(url, verbose=args.verbose)
    return xmlrpc

# --- Server


def command_server_start(args):
    start_jar(args, ["server"])


def command_stop_server(args):
    server = getServer(args)
    server.Server.shutdown()


def command_run_js(args):
    xmlrpc = getServer(args)

    env = []
    for key, value in os.environ.iteritems():
        env.append([key, value])

    # Remote mode
    if args.remote:
        isFile = False
    else:
        isFile = True

    # Get the command line
    filepaths = []
    filecontents = []
    for filename in args.files:
        filepath = os.path.abspath(filename)
        filepaths.append(filepath)
        if not args.remote:
            filecontents.append("")
        else:
            filecontents.append(file(filepath).read())

    logging.info("Running JS scripts %s" % filepaths)

    try:
        r = xmlrpc.Server.runJSScript(isFile, filepaths, filecontents, env)
        if len(r) > 2:
            print(r[2])
        if r[0]:
            print
            print "### Error while running %s ###" % filename
            print r[1]
            sys.exit(r[0])
            print
    except xmlrpclib.Fault as e:
        print e
        sys.exit(1)
    except Exception as e:
        print e
        sys.exit(1)


def command_update_jobs(args):
    server = getServer(args)
    print "%d updated job(s)" % server.Server.updateJobs("", False, [])


def command_ls(args):
    server = getServer(args)
    response = server.Server.listJobs(args.group, [])
    for l in response:
        state = l.get("state", "?")
        if state == 'ERROR':
            print cformat("#RED;%s" % l)
        elif state == 'DONE':
            print cformat("#GREEN;%s" % l)
        elif state == 'RUNNING':
            print cformat("#CYAN;%s" % l)
        else:
            print l


def command_list_methods(args):
    server = getServer(args)
    for method in server.system.listMethods():
        if not method.startswith("system"):
            print("# %s" % method)
            print server.system.methodSignature(method)
            print server.system.methodHelp(method)
            print


def command_information(args):
    server = getServer(args)
    print server.Server.getResourceInformation(args.resourceId[0])


def command_invalidate(args):
    server = getServer(args)
    print server.Server.invalidateJob(args.resourceId[0], args.recursive)


def command_kill(args):
    server = getServer(args)
    n = server.Server.kill(args.jobid)
    print "Killed %d jobs" % n


def command_rm(args):
    server = getServer(args)
    if len(args.jobid) == 0:
        args.jobid = [""]

    states = args.states
    if states is not None:
        states = args.states.split(",")
    else:
        states = []

    if args.group is None:
        args.group = ""

    for jobid in args.jobid:
        n = server.Server.remove(args.group, jobid, states)
        print "Removed %d resources" % n

# --- Run command


# create the top-level parser
parser = argparse.ArgumentParser(description='experimaestro script.')
subparsers = parser.add_subparsers(help='sub-command help', dest='command')
parser.set_defaults(dir=dir)
parser.add_argument("--log", dest="loglevel", action="store", help="Log level",
                    choices=["debug", "info", "warn"], default="info")
parser.add_argument("--maven", dest="maven", action="store_true", help="Force starts using maven")
parser.add_argument("--verbose", dest="verbose", action="store_true", help="Use verbose mode for XML-RPC server")
parser.add_argument("--config", dest="config", default="~/.experimaestro", action="store",
                    help="Experimaestro configuration file")

subparser = subparsers.add_parser("start-server", help="Start the experimaestro server")

subparser = subparsers.add_parser("stop-server", help="Stop the experimaestro server")

p_run_js = subparsers.add_parser("run-js", help="Run JavaScript script in server")
p_run_js.add_argument("--remote", dest="remote", action="store_true", help="For the remote mode (files should be transmitted)")
p_run_js.add_argument("--post", dest="post", help="Execute this javascript after the files")
p_run_js.add_argument('files', nargs='*', help='')

subparsers.add_parser("update-jobs", help="Update jobs")

p_ls = subparsers.add_parser("ls", help="List jobs")
p_ls.add_argument('group', nargs='?', help="The group to list", default="")

subparsers.add_parser("list-methods", help="List XML-RPC methods")

p_invalidate = subparsers.add_parser("invalidate", help="Invalidate a job")
p_invalidate.add_argument('--recursive', dest="recursive", action="store_true", default=False, help="Should dependent resources be invalidated?")
p_invalidate.add_argument('resourceId', nargs=1, help='The resource URI')

p_information = subparsers.add_parser("information", help="Get information on a resource")
p_information.add_argument('resourceId', nargs=1, help='The resource URI')

p_rm = subparsers.add_parser("rm", help="Remove a resource")
p_rm.add_argument('--states', dest="states", help="States")
p_rm.add_argument('--group', dest="group")
p_rm.add_argument('jobid', nargs="*", help="The job ids")

p_kill = subparsers.add_parser("kill", help="Kill a job")
p_kill.add_argument('jobid', nargs="+", help="The job URIs")

# Parse arguments
args = parser.parse_args()

numeric_level = getattr(logging, args.loglevel.upper(), None)
if not isinstance(numeric_level, int):
    raise ValueError('Invalid log level: %s' % args.loglevel)

try:
    fname = "command_%s" % args.command.replace("-", "_")
    locals()[fname](args)
except Exception as e:
    print e
    sys.exit(1)
