#!/usr/bin/env python3
# PYTHON_ARGCOMPLETE_OK

import os
import os.path
import sys
import subprocess
import argparse
import string
import logging
import re
from icolor import cformat
import traceback
import base64
import websocket
import json
import argcomplete
import jsonrpclib
import socket
# import daemon

# --- Set some variables

xpmdir = os.path.dirname(os.path.dirname(os.path.realpath(os.path.abspath(__file__))))

version = "0.0.1-SNAPSHOT"
jarname = "experimaestro-%s.jar" % version

logging.basicConfig(level=logging.INFO)


# --- Check paths
def jarpaths():
    """Returns the different paths where the JAR file can be located"""
    yield os.path.join(xpmdir, jarname)
    yield os.path.join(xpmdir, "target", "experimaestro-%s-bin" % version, jarname)


def start_jar(args, jarargs):
    # --- See
    # http://code.activestate.com/recipes/278731-creating-a-daemon-the-python-way/
    # http://www.python.org/dev/peps/pep-3143/#python-daemon
    # --- in order to create a daemon

    raise Exception("Not implemented")
    

    # Check what if we start using maven
    mvnFile = os.path.join(xpmdir, "pom.xml")
    if not os.path.exists(mvnFile):
        mvnFile = None

    if args.maven or mvnFile is not None:
        logging.info("Starting with maven")
        command = ["mvn", "exec:java", "-Dexec.mainClass=bpiwowar.experiments.Run"]
        if mvnFile is not None:
            command.append("--file")
            command.append(mvnFile)
        jarargs = [arg for arg in jarargs]
        command.append("-Dexec.args=%s" % string.join(jarargs, " "))

    else:
        jarpath = None
        for f in jarpaths():
            print("Trying %s" % f)
            if os.path.isfile(f):
                jarpath = f
                break

        if jarpath is None:
            raise Exception("Could not find experimaestro jar file")
        command = ["java", "-Xmx1g", "-jar", jarpath] + jarargs

    # print command
    logging.debug('Running command %s' % command)
    subprocess.call(command)


class Properties:
    def __init__(self, map=[None, {}]):
        self.map = map

    def __len__(self):
        return len(self.map[1])

    def __getitem__(self, name):
        v = self.sub(name, None)
        if v is None:
            raise Exception("No key %s in properties" % name)
        return v.map[0]

    def keys(self):
        return self.map[1].keys()

    def get(self, name, default=None):
        v = self.sub(name, None)
        if v is None:
            return None
        return v.map[0]

    def __str__(self):
        return "Properties (%s)" % self.map.__str__()

    def __iter__(self):
        for k, v in self.map[1].items():
            yield k, Properties(v)

    def sub(self, name, default=None):
        c = self.map
        for k in name.split("."):
            if not k in c[1]:
                return default
            else:
                c = c[1][k]
        return Properties(c)

    def set(self, name, value):
        c = self.map
        for k in name.split("."):
            if not k in c[1]:
                c[1][k] = [None, {}]
            c = c[1][k]

        c[0] = value


def getProperties(filename):
    """Get a dictionnary from a property file
   """
    propFile = open(filename, "rU")

    re_comment = re.compile(r"""[#;].*""")
    re_section = re.compile(r"""^\[(\w+)\]$""")
    re_value = re.compile(r"""([\w.]+)\s*=\s*(\S*)\s*""")

    # Set some default values
    props = Properties()
    section = ""

    # Read the properties
    for propLine in propFile:
        propDef = propLine.strip()
        if len(propDef) == 0 or re_comment.match(propDef):
            continue

        m = re_section.match(propDef)
        if m is not None:
            section = m.group(1) + "."
            continue

        m = re_value.match(propDef)
        if m is not None:
            props.set(section + m.group(1), m.group(2))
            continue

        raise Exception("Could not read line [%s]" % propDef)

    propFile.close()
    return props


class Configuration():
    def __init__(self, args):
        """Get the configuration from command line and configuration file"""

        # Get the configuration
        configfile = os.path.expanduser(args.config)

        # Initialise the server
        config = getProperties(configfile)

        clients = config.sub("client", None)
        if clients is None:
            raise Exception("No client section in configuration file")

        if args.server is None:
            if len(clients) > 1:
                args.server = None
                for name, client in clients:
                    if client.get("default", False) == "true":
                        if args.server is None:
                            args.server = name
                        else:
                            raise Exception("More than one client defined as default in configuration file")
                if args.server is None:
                    raise Exception("More than one client [%d] in configuration file (%s): use the --server option or make one client the default"
                                    % (len(clients), ",".join(clients.keys())))
            else:
                args.server = clients.keys()[0]

        self.client = clients.sub(args.server)
        self.remote = self.client.get("remote", False) in ["true", "True", "1"]


    def getJsonServer(self):
        return jsonrpclib.Server("%s/json-rpc" % self.client["url"], verbose=args.verbose)

    def getWebSocketServer(self):
        re_url = re.compile("""http(s)?://(?:([^:@]+):([^@]+)@)?(.+)$""")
        m = re_url.match(self.client["url"])
        if not m:
            raise "Client URL is not valid"

        scheme = "ws"
        if m.group(1):
            scheme = "wss"
        url = "%s://%s/web-socket" % (scheme, m.group(4))
        header = []
        if m.group(2) and m.group(3):
            auth = base64.b64encode(bytes("%s:%s" % (m.group(2), m.group(3)), "ascii")).decode("ascii")
            header = ["Authorization: Basic %s" % auth]
        return websocket.create_connection(url, header=header)


# --- Server


def ping(json_server):
    try:
        return json_server.ping([]) == "pong"
    except socket.error as e:
        return False

def command_start_server(args):
    json_server = Configuration(args).getJsonServer()
    if ping(json_server):
        logging.info("Server already started")
        return 0

    start_jar(args, ["server"])


def command_stop_server(args):
    server = Configuration(args).getJsonServer()
    server.shutdown({})


def command_run_python(args):
    conf = Configuration(args)
    client = conf.getWebSocketServer()

    # Get the command line
    files = []

    if args.pre:
        files.append(["<pre>", args.pre])

    for filename in args.files:
        filepath = os.path.abspath(filename)
        if not conf.remote:
            files.append([filepath, None])
        else:
            files.append([filepath, open(filepath).read()])

    if args.post:
        files.append(["<post>", args.post])

    logging.debug("Running python scripts %s" % [s[0] for s in files])

    params = {"files": files, "environment": dict(os.environ)}
    # if args.debug_port > 0:
    #     params["debug"] = args.debug_port

    try:
        code = 0
        msg = json.dumps({"id": 1, "method": "run-python", "params": params})
        client.send(msg)
        while client is not None:
            message = client.recv()
            o = json.loads(message)
            if type(o) == dict:
                if o["id"]:
                    if o["error"]:
                        code = o["error"]["code"]
                        sys.stderr.write("%s\n" % o["error"]["message"])
                    break
                else:
                    result = o["result"]
                    if result["stream"] == "out":
                        sys.stdout.write(result["value"])
                    elif result["stream"] == "err":
                        sys.stderr.write(result["value"])
                    else:
                        sys.stderr.write("Cannot interpret stream %s" % result["stream"])

        sys.exit(code)
    except Exception as e:
        print(e)
        sys.exit(1)

def command_run_js(args):
    conf = Configuration(args)
    client = conf.getWebSocketServer()

    # Get the command line
    files = []

    if args.pre:
        files.append(["<pre>", args.pre])

    for filename in args.files:
        filepath = os.path.abspath(filename)
        if not conf.remote:
            files.append([filepath, None])
        else:
            files.append([filepath, open(filepath).read()])

    if args.post:
        files.append(["<post>", args.post])

    logging.debug("Running JS scripts %s" % [s[0] for s in files])

    params = {"files": files, "environment": dict(os.environ)}  
    if args.debug_port > 0:
        params["debug"] = args.debug_port

    try:
        code = 0
        msg = json.dumps({"id": 1, "method": "run-javascript", "params": params})
        client.send(msg)
        while client is not None:
            message = client.recv()
            o = json.loads(message)
            if type(o) == dict:
                if o["id"]:
                    if o["error"]:
                        code = o["error"]["code"]
                        sys.stderr.write("%s\n" % o["error"]["message"])
                    break
                else:
                    result = o["result"]
                    if result["stream"] == "out":
                        sys.stdout.write(result["value"])
                    else:
                        sys.stdout.write(result["value"])

        sys.exit(code)
    except Exception as e:
        print(e)
        sys.exit(1)


def command_update(args):
    server = Configuration(args).getServer()
    print("%d updated job(s)" % server.Server.updateJobs(args.group, args.recursive, get_states(args.states)))


def command_ls(args):
    server = Configuration(args).getServer()
    response = server.Server.listJobs(args.group, get_states(args.states))
    for l in response:
        state = l.get("state", "?").upper()
        if state == 'ERROR':
            print(cformat("#RED;%s" % l))
        elif state == 'DONE':
            print(cformat("#GREEN;%s" % l))
        elif state == 'RUNNING':
            print(cformat("#CYAN;%s" % l))
        elif state == 'ON_HOLD':
            print(cformat("#YELLOW;%s" % l))
        else:
            print(l)


def command_ping(args):
    r = Configuration(args).getJsonServer().ping([])
    if r == "pong":
        sys.exit(0)
    sys.exit(1)


def command_list_methods(args):
    server = Configuration(args).getServer()
    for method in server.system.listMethods():
        if not method.startswith("system"):
            print("# %s" % method)
            print(server.system.methodSignature(method))
            print(server.system.methodHelp(method))
            print


def command_information(args):
    server = Configuration(args).getJsonServer()
    print(server.getResourceInformation(args.resourceId[0]))


def command_invalidate(args):
    server = Configuration(args).getServer()
    print(server.Server.invalidateJob(args.resourceId[0], args.recursive))


def command_kill(args):
    server = Configuration(args).getServer()
    n = server.Server.kill(args.jobid)
    print("Killed %d jobs" % n)


def command_rm(args):
    server = Configuration(args).getJsonServer()
    if len(args.jobid) == 0:
        args.jobid = [""]

    states = get_states(args.states)
    if args.group is None:
        args.group = ""

    for jobid in args.jobid:
        n = server.remove(group=args.group, id=jobid, states=states, recursive=args.recursive, regexp=args.regexp)
        print("Removed %d resources" % n)


def command_log_level(args):
    server = Configuration(args).getServer()
    server.Server.setLogLevel(args.id[0], args.level[0])

# --- Utility functions


def get_states(states):
    if states is not None:
        states = args.states.split(",")
    else:
        states = []
    return states


# --- Run command


# create the top-level parser
parser = argparse.ArgumentParser(description='experimaestro script.')
subparsers = parser.add_subparsers(help='Command', dest='command')
parser.set_defaults(dir=xpmdir)
parser.add_argument("--log", dest="loglevel", action="store", help="Log level",
                    choices=["debug", "info", "warn"], default="info")
parser.add_argument("--maven", dest="maven", action="store_true", help="Force starts using maven")
parser.add_argument("--debug", dest="debug", action="store_true", help="Debug script")
parser.add_argument("--verbose", dest="verbose", action="store_true", help="Use verbose mode for XML-RPC server")
parser.add_argument("--config", dest="config", default="~/.experimaestro/settings.ini", action="store",
                    help="Experimaestro configuration file")
parser.add_argument("--server", dest="server", action="store", help="The experimaestro server to use")

subparser = subparsers.add_parser("start-server", help="Start the experimaestro server")

subparser = subparsers.add_parser("stop-server", help="Stop the experimaestro server")

p_run_js = subparsers.add_parser("run-js", help="Run JavaScript script in server")
p_run_js.add_argument("--debug-port", dest="debug_port", default=-1, type=int, help="Port for remote JS debugging")
p_run_js.add_argument("--remote", dest="remote", action="store_true", help="For the remote mode (files should be transmitted)")
p_run_js.add_argument("--pre", dest="pre", help="Execute this javascript before the files")
p_run_js.add_argument("--post", dest="post", help="Execute this javascript after the files")
p_run_js.add_argument('files', nargs='*', help='')


p_run_python = subparsers.add_parser("run-python", help="Run one or more python scripts on the server")
p_run_python.add_argument("--pre", dest="pre", help="Execute this python code before the files")
p_run_python.add_argument("--post", dest="post", help="Execute this python code after the files")
p_run_python.add_argument('files', nargs='*', help='')

job_specification = argparse.ArgumentParser(add_help=False)
job_specification.add_argument('--states', dest="states", help="States")
job_specification.add_argument('group', nargs='?', help="The group to list", default="")
job_specification.add_argument('--recursive', dest="recursive", action="store_true", default=False, help="Should dependent resources be invalidated?")

subparsers.add_parser("update", help="Update jobs", parents=[job_specification])

p_ls = subparsers.add_parser("ls", help="List jobs", parents=[job_specification])

subparsers.add_parser("list-methods", help="List XML-RPC methods")

p_invalidate = subparsers.add_parser("invalidate", help="Invalidate a job")
p_invalidate.add_argument('--recursive', dest="recursive", action="store_true", default=False, help="Should dependent resources be invalidated?")
p_invalidate.add_argument('resourceId', nargs=1, help='The resource URI')

p_information = subparsers.add_parser("information", help="Get information on a resource")
p_information.add_argument('resourceId', nargs=1, help='The resource URI')

p_rm = subparsers.add_parser("rm", help="Remove a resource")
p_rm.add_argument('--regexp', dest="regexp", action="store_true", default=False, help="If the provided id are regular expressions")
p_rm.add_argument('--states', dest="states", help="States")
p_rm.add_argument('--group', dest="group")
p_rm.add_argument('--recursive', dest="recursive", action="store_true", default=False, help="Should dependent resources be invalidated?")
p_rm.add_argument('jobid', nargs="*", help="The job ids")

p_kill = subparsers.add_parser("kill", help="Kill a job")
p_kill.add_argument('jobid', nargs="+", help="The job URIs")

p_log_level = subparsers.add_parser("log-level", help="Set the logger level")
p_log_level.add_argument('id', nargs=1, help='The logger ID')
p_log_level.add_argument('level', nargs=1, choices=["DEBUG", "INFO", "WARN", "ERROR", "FATAL"], help='The level')

subparsers.add_parser("ping", help="Ping the server")

# Parse arguments
args = parser.parse_args()
argcomplete.autocomplete(args)

numeric_level = getattr(logging, args.loglevel.upper(), None)
if not isinstance(numeric_level, int):
    raise ValueError('Invalid log level: %s' % args.loglevel)

try:
    fname = "command_%s" % args.command.replace("-", "_")
    locals()[fname](args)
except Exception as e:
    print(e)
    if args.debug:
        print(traceback.format_exc())
    sys.exit(1)
