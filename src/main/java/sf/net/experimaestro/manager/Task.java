package sf.net.experimaestro.manager;

import java.util.Map;
import java.util.Map.Entry;
import java.util.TreeMap;

import javax.xml.namespace.QName;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;

import org.w3c.dom.Document;
import org.w3c.dom.Element;

import sf.net.experimaestro.utils.log.Logger;

public abstract class Task {
	public final static DocumentBuilderFactory dbFactory = DocumentBuilderFactory
			.newInstance();
	@SuppressWarnings("unused")
	final static private Logger LOGGER = Logger.getLogger();

	/**
	 * The information related to this class of experiment
	 */
	protected TaskFactory factory;

	/**
	 * List of sub-tasks
	 */
	protected Map<String, Task> tasks = new TreeMap<String, Task>();

	/**
	 * Construct a new task from a {@link TaskFactory}
	 * 
	 * @param information
	 */
	protected Task(TaskFactory information) {
		this.factory = information;
	}

	/**
	 * Returns the factory that created this task
	 */
	public TaskFactory getFactory() {
		return factory;
	}

	protected Input getInput(String key) {
		return getInputs().get(new DotName(key));
	}

	/**
	 * Get the list of parameters
	 */
	public Map<DotName, Input> getInputs() {
		return factory.getInputs();
	}

	/**
	 * Get the current outputs (given the current parameters)
	 */
	public Map<String, QName> getOutputs() {
		return factory.getOutputs();
	}

	/**
	 * Get the list of sub tasks
	 * 
	 * @return A map or null
	 */
	public Map<String, Task> getSubTasks() {
		return tasks;
	}

	/**
	 * Get a sub task
	 * 
	 * @param id
	 * @return
	 */
	Task getTask(String id) {
		return tasks.get(id);
	}

	/**
	 * Run this task. The output is a valid XML document where top level
	 * elements correspond to the different outputs generated by the method
	 * 
	 * @return An XML description of the output
	 */
	public abstract Document doRun();

	/**
	 * Run this task.
	 * 
	 * Calls {@linkplain #doRun()}
	 */
	final public Document run() {
		LOGGER.info("Running task [%s]", factory == null ? "n/a" : factory.id);
		for (Entry<String, Task> entry : tasks.entrySet()) {
			// If a subtask has the same name has an input parameter,
			// substitute its output
			final String key = entry.getKey();
			Input input = getInput(key);
			if (input != null) {
				LOGGER.info("Task with the same name as an input [%s]: running it", key);
				Task subtask = entry.getValue();
				setParameter(new DotName(key), subtask.run()
						.getDocumentElement(), true);
			}
		}
		// Do the real-run
		return doRun();
	}


	/**
	 * Set a parameter
	 * 
	 * @param id
	 *            The identifier for this parameter (dot names)
	 * @param value
	 *            The value to be set (this should be an XML fragment)
	 * @return True if the parameter was set and false otherwise
	 */
	final public boolean setParameter(DotName id, Element value) {
		return setParameter(id, value, false);

	}

	/**
	 * Set a parameter
	 * 
	 * @param id
	 *            The identifier for this parameter (dot names)
	 * @param value
	 *            The value to be set (this should be an XML fragment)
	 * @return True if the parameter was set and false otherwise
	 */
	public boolean setParameter(DotName id, Element value, boolean direct) {
		if (direct)
			return false;
		
		String name = id.get(0);

		// If the first name is a task name
		Task task = tasks.get(name);
		if (task != null)
			return task.setParameter(id.offset(1), value);

		// Could not handle it
		return false;
	}

	
	/**
	 * Set a parameter.
	 * 
	 * Utility function that wraps a string into an XML node
	 * 
	 * @param id
	 * @param value
	 */
	public void setParameter(DotName id, String value) {
		try {
			DocumentBuilder docBuilder = dbFactory.newDocumentBuilder();
			Element element = docBuilder.newDocument().createElementNS(
					Manager.EXPERIMAESTRO_NS, "value");
			element.setAttributeNS(Manager.EXPERIMAESTRO_NS, "value", value);
			setParameter(id, element);
		} catch (ParserConfigurationException e) {
			throw new RuntimeException(e);
		}
	}

	/**
	 * Initialise the task
	 */
	public void init() {
		Repository repository = getFactory().getRepository();

		for (Entry<DotName, Input> entry : getInputs().entrySet()) {
			DotName key = entry.getKey();
			if (key.isQualified())
				continue;
			QName typeName = entry.getValue().type;
			LOGGER.info("Looking at [%s] of type [%s]", key, typeName);
			Type type = repository.getType(typeName);

			if (type instanceof AlternativeType) {
				LOGGER.info(
						"Detected an alternative type configuration for input [%s] of type [%s]",
						key, typeName);
				AlternativeTask task = new AlternativeTask(
						(AlternativeType) type);
				tasks.put(key.getName(), task);
			}
		}
	}

}
