package sf.net.experimaestro.manager;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.Map;
import java.util.Map.Entry;
import java.util.TreeMap;
import java.util.TreeSet;

import javax.xml.namespace.QName;
import javax.xml.parsers.DocumentBuilderFactory;

import org.w3c.dom.Document;
import org.w3c.dom.Element;

import sf.net.experimaestro.exceptions.ExperimaestroException;
import sf.net.experimaestro.manager.Input.Connection;
import sf.net.experimaestro.utils.XMLUtils;
import sf.net.experimaestro.utils.log.Logger;

public abstract class Task {
	public final static DocumentBuilderFactory dbFactory = DocumentBuilderFactory
			.newInstance();
	@SuppressWarnings("unused")
	final static private Logger LOGGER = Logger.getLogger();

	/**
	 * The information related to this class of experiment
	 */
	protected TaskFactory factory;

	/**
	 * List of sub-tasks
	 */
	protected Map<String, Value> values = new TreeMap<String, Value>();

	/**
	 * Construct a new task from a {@link TaskFactory}
	 * 
	 * @param information
	 */
	protected Task(TaskFactory information) {
		this.factory = information;
	}

	/**
	 * Returns the factory that created this task
	 */
	public TaskFactory getFactory() {
		return factory;
	}

	protected Input getInput(String key) {
		return getInputs().get(new DotName(key));
	}

	/**
	 * Get the list of parameters
	 */
	public Map<String, Input> getInputs() {
		return factory.getInputs();
	}

	/**
	 * Get the current outputs (given the current parameters)
	 */
	public Map<String, QName> getOutputs() {
		return factory.getOutputs();
	}

	/**
	 * Get the list of sub tasks
	 * 
	 * @return A map or null
	 */
	public Map<String, Value> getValues() {
		return values;
	}

	/**
	 * Run this task. The output is a valid XML document where top level
	 * elements correspond to the different outputs generated by the method
	 * 
	 * @return An XML description of the output
	 */
	public abstract Document doRun();

	/**
	 * Run this task.
	 * 
	 * Calls {@linkplain #doRun()}
	 */
	final public Document run() {
		LOGGER.info("Running task [%s]", factory == null ? "n/a" : factory.id);

		// (1) Get the inputs so that dependent ones are evaluated latter
		ArrayList<String> list = getOrderedInputs();

		// (2) Do some post-processing on values
		for (String key : list) {
			Value value = values.get(key);
			value.process();
			value.processConnections(this);
		}

		// Do the real-run
		return doRun();
	}

	/**
	 * Order the inputs in topological order in order to evaluate them when
	 * dependencies due to connections are satisfied
	 */
	private ArrayList<String> getOrderedInputs() {
		// (1) Order the values to avoid dependencies
		// See http://en.wikipedia.org/wiki/Topological_sorting
		ArrayList<String> list = new ArrayList<String>();
		ArrayList<String> graph = new ArrayList<String>(values.keySet());

		Map<String, TreeSet<String>> forward_edges = new TreeMap<String, TreeSet<String>>();
		Map<String, TreeSet<String>> backwards_edges = new TreeMap<String, TreeSet<String>>();

		// Build the edge maps
		for (Entry<String, Value> entry : values.entrySet())
			for (Connection c : entry.getValue().input.connections) {
				final String from = entry.getKey();
				final String to = c.to.get(0);
				LOGGER.debug("[build] Adding edge from %s to %s", from, to);
				addEdge(forward_edges, from, to);
				addEdge(backwards_edges, to, from);
			}

		// Get the free nodes
		boolean done = false;
		while (!done) {
			done = true;
			Iterator<String> iterator = graph.iterator();
			while (iterator.hasNext()) {
				String n1 = iterator.next();
				final TreeSet<String> inSet = backwards_edges.get(n1);
				LOGGER.debug("Node %s has %d incoming edges", n1,
						inSet == null ? 0 : inSet.size());
				if (inSet == null || inSet.isEmpty()) {
					LOGGER.debug("Removing node %s", n1);
					done = false;
					list.add(n1);
					iterator.remove();

					// Remove the edges from n1
					final TreeSet<String> nodes = forward_edges.get(n1);
					if (nodes != null)
						for (String n2 : nodes) {
							LOGGER.debug("Removing edge from %s to %s", n1, n2);
							backwards_edges.get(n2).remove(n1);
						}
				}
			}
		}

		if (!graph.isEmpty())
			throw new ExperimaestroException("Loop in the graph for task [%s]",
					factory.id);
		
		return list;
	}

	static private void addEdge(Map<String, TreeSet<String>> edges,
			String from, String to) {
		TreeSet<String> inSet = edges.get(from);
		if (inSet == null)
			edges.put(from, inSet = new TreeSet<String>());
		inSet.add(to);
	}

	/**
	 * Set a parameter
	 * 
	 * @param id
	 *            The identifier for this parameter (dot names)
	 * @param value
	 *            The value to be set (this should be an XML fragment)
	 * @return True if the parameter was set and false otherwise
	 */
	public final void setParameter(DotName id, Document value) {
		String name = id.get(0);

		Value inputValue = values.get(name);
		if (inputValue == null)
			throw new ExperimaestroException("Task %s has no input [%s]",
					factory.id, name);

		inputValue.set(id.offset(1), value);

	}

	/**
	 * Set a parameter.
	 * 
	 * Utility function that wraps a string into an XML node
	 * 
	 * @param id
	 * @param value
	 */
	public void setParameter(DotName id, String value) {
		final Document doc = wrapValue(value);
		setParameter(id, doc);
	}

	/**
	 * Wrap a value into an XML document
	 * 
	 * @param value
	 * @return An XML document representing the value
	 */
	static public Document wrapValue(String value) {
		final Document doc = XMLUtils.newDocument();
		Element element = doc
				.createElementNS(Manager.EXPERIMAESTRO_NS, "value");
		element.setAttributeNS(Manager.EXPERIMAESTRO_NS, "value", value);
		doc.appendChild(element);
		return doc;
	}

	/**
	 * Initialise the task
	 */
	public void init() {
		// Create values for each input
		for (Entry<String, Input> entry : getInputs().entrySet()) {
			String key = entry.getKey();
			final Value value = entry.getValue().newValue();
			values.put(key, value);
		}

	}

}
