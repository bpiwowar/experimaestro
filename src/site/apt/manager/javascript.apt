  ------
  Javascript for Manager
  ------
  Benjamin Piwowarski
  ------
  2011-04-08
  ------

  <<Table of contents>>

%{toc|fromDepth=1|toDepth=3}
  
Example

  Example to illustrate how to create a task and run it.
  
  The following creates a simple task factory
   
%{code-snippet|brush=javascript|id=task|file=src/test/resources/js/directtask.js}
 
  A task can be run
  
%{code-snippet|brush=javascript|id=run|file=src/test/resources/js/directtask.js}

  And the output will be
  
+------------------------------------------+
The task returned
<outputs>
  <value xmlns="http://experimaestro.sf.net" value="10"/>
</outputs>
+------------------------------------------+

Task factories

  In this section, we give various examples of the different options available while writing a task factory.
  
* {Default values}

  Default values can be used to set a task parameter to a default value.
  There are two different ways to define defaults values:
  
  [[1]] Using the <<<default>>> attribute in the input definition
  
  [[1]] Using the <<<default>>> element
  
%{code-snippet|brush=javascript||id=main|file=src/test/resources/js/default.js}

* {Alternatives}

  Alternatives can be used in order to use different tasks, that can be chosen through setting
  a parameter to the qualified namespace. In the following example, the parameter of type


%{code-snippet|brush=javascript||id=main|file=src/test/resources/js/alternatives.js}

* {Subtasks}

%{code-snippet|brush=javascript||id=main|file=src/test/resources/js/subtasks.js}

* {Composing tasks}
 
%{code-snippet|brush=javascript||id=main|file=src/test/resources/js/composing.js}

%{code-snippet|brush=javascript||id=main|file=src/test/resources/js/composing_2.js}


{Experimental plans}

We use as an example a task that multiply its two inputs <<<x>>> and <<<y>>>:

%{code-snippet|brush=javascript||id=main|file=src/test/resources/js/plan.js}

The following code runs an experimental plan where the values of <<<x>>> can be either 1 and 2, and
the values of <<<y>>> are 5 and 7.

%{code-snippet|brush=javascript||id=check|file=src/test/resources/js/plan.js}

The values in are <<<results>>> the values 5, 10, 7 and 14.


{Predefined functions}
 
   When running a script, the following variables are set:
   
   *  <<<xp>>> is a Namespace object that represents the experimaestro namespace
   
   *  <<<xpm>>> is an object containing useful functions and properties

   * <<<qname(uri, name)>>> returns a qualified name
   
* {<<<xpm>>> object}

** Properties

** Functions

  * <<<addTaskFactory(task)>>> Adds a task factory to the manager

  * <<<getTask(namespace, id)>>> Get a new instance of task given the namespace and the id
  
  * <<<log(format, object, [object ...])>>> Returns a message using the format static method from String.

  * <<<include(path)>>> includes another javascript file (path is relative to the current file)

  * <<<xpath(query, xml)>>> runs an XPath query on an XML document or fragment. See {{XPath handling}} for
    a description of how XPath are handled within experimaestro.

{XPath handling}

  XPath are evaluated with the current node corresponding to the <<root element>> of the XML document.
	
* {XPath Functions}

  * <<<parentPath(String)>>> returns the parent path. For example,
    <<<xpm.xpath("xp:parentPath(path)", <a><path>/a/b/c</path></a>)>>> returns <<<a/b>>>.
