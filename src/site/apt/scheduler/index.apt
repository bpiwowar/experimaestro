  ------
  Scheduler
  ------
  Benjamin Piwowarski
  ------
  2011-04-08
  ------


Main concepts

  The job scheduler goal is to run interdependent jobs (i.e. one job might need one or several outputs from other jobs)
  
  * Resources
  
  Any object is a resource, whether it is data, a job, or a server. Resources are located on different hosts
  that can be specified by a URL. For the moment `local`  and `ssh` are the only supported schemes.
  
  * Job state
  
  A job can be in the state: HOLD (waiting a user action), WAITING (waiting for a slot to run), RUNNING, DONE, ERROR
  
  * Groups

  One should allow to set a group for a set of experiments (could even be a qualified name)
  example: I run several series of experiment and call them "trec.test1", "trec.test2"
  I can then operate on the group "trec" or on more specific groups "trec.test1", etc...

General architecture

  Organisation is flexible (in the sense that the structure can be hierarchic or not, and can be modified by the user).

* Resources

  We have the following types of resources:
  
  * DATA:   the output of one job (one job can have several outputs); data can also be already generated by an external process (e.g. a data collection).
  
  * TASK:
    
    * JOB:    a task to be run, that produces a given set of resources.
    
    * SERVER: a task that need to be run; however, we don't wait for the server run to complete
 
  Data objects can be updated 

  Constraints:
  
  * a TASK resource may depend on several JOB, DATA and SERVER resources.
  
  * a DATA resource may be updated by a TASK, in which case the DATA is both input and output of the TASK
  
  * a DATA or SERVER resource may be locked read-only, or read-write (the underlying behaviour depends on what the DATA/SERVER allows) 


* Status

  Every resource (see below) has a unique ID which is a path to a directory containing information about the resource on the
  host.

  Based on the file <<<${FILE}>>>, several paths are defined (note that not all files might be present)
  
  * <<<${FILE}.lock>>>   locks the write access to the status (can also be used as an exclusive lock to the resource)
    This file is used whenever an exclusive access is needed.
  
  * <<<${FILE}.status>>>  contains the PID of the running process (two columns PID MODE separated by space) where MODE is r, w.
    This file is used when the resource can be accessed by a single writer and multiple readers
  
  * <<<${FILE}.run>>>  corresponds to the script that are needed to execute the job

  * <<<${FILE}.code>>>  corresponds to the error code at the end of the execution of the job

  * <<<${FILE}.done>>> created when the job was successfully executed or the data successfully generated
  
  * <<<${FILE}.err>>>  contains the error log output (jobs only)
  
  * <<<${FILE}.out>>>  contains the standard log output (jobs only)


The job scheduler

* Configuration

  The server and clients are configured by a simple property file

+------------------------------------------+
[server]
; Port for the Web server (and the XML-RPC server)
port = 12345
; Experimaestro will store its data in this folder
database = /path/to/a/valid/folder

[passwords]

USERNAME = PASSWORD, GROUP

[client]

url = http://USERNAME:PASSWORD@localhost:12345/xmlrpc

+------------------------------------------+

  All the commands are started by
+------------------------------------------+
  experimaestro [--configuration PATH] command [COMMAND OPTIONS]
+------------------------------------------+

  We now describe the different commands

* Starting the server

+------------------------------------------+
  server
+------------------------------------------+

* Adding data

+------------------------------------------+
  create-data --id '''ID''' --mode '''MODE'''
+------------------------------------------+

  where
  
  * <<<ID>>> : The resource identifier
  
  * <<<MODE>>> : The locking mode  <<<truc>>>:  blah blah

* Adding a job

+------------------------------------------+
  add-job --basename '''ID''' '''CMD'''
+------------------------------------------+

  where:
  
  * <<<ID>>>: the base name of the job to be added
  
  * <<<CMD>>>: the command line to execute


* Running a script


