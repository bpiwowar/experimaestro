  ------
  Scheduler
  ------
  Benjamin Piwowarski
  ------
  2011-04-08
  ------


Main concepts

  The job scheduler goal is to run interdependent jobs (i.e. one job might need one or several outputs from other jobs)
  
  * Resources
  
  Any object is a resource, whether it is data, a job, or a server.
  
  * Job state
  
  A job can be in the state: RUNNING, WAITING, HOLD, CANCELLED, ERROR 
  
  * Groups

  One should allow to set a group for a set of experiments (could even be a qualified name)
  example: I run several series of experiment and call them "trec.test1", "trec.test2"
  I can then operate on the group "trec" or on more specific groups "trec.test1", etc...

General architecture

  Organisation is flexible (in the sense that the structure can be hierarchic or not, and can be modified by the user).

* Resources

  We have the following types of resources:
  
  * DATA:   the output of one job (one job can have several outputs); data can also be already generated by an external process (e.g. a data collection).
  
  * TASK:
    
    * JOB:    a task to be run, that produces a given set of resources.
    
    * SERVER: a task that need to be run; however, we don't wait for the server run to complete
 
  Data objects can be updated 

  Constraints:
  
  * a TASK resource may depend on several JOB, DATA and SERVER resources.
  
  * a DATA resource may be updated by a TASK, in which case the DATA is both input and output of the TASK
  
  * a DATA or SERVER resource may be locked read-only, or read-write (the underlying behaviour depends on what the DATA/SERVER allows) 


* Status

  Every resource (see below) has a unique ID which is a path to a directory containing information about the resource

  Based on the file <<<${FILE}>>>, several paths are defined (not that not all files might be present)
  
  * <<<${FILE}.lock>>>     locks the write access to the status (can also be used as an exclusive lock to the resource)
  
  * <<<${FILE}.status>>>   (optional) contains the PID of the running process (two columns PID MODE separated by space) where MODE is r, w
  
  * <<<${FILE}.done>>>     created when the job was successfully executed or the data successfully generated
  
  * <<<${FILE}.err>>>  contains the error log output (jobs only)
  
  * <<<${FILE}.std>>>  contains the standard log output (jobs only)


The job scheduler

* Configuration

  The server is configured by a simple property file

+------------------------------------------+
  url = http://localhost:8080/xmlrpc/
  login = USER_NAME
  password = PASSWORD
+------------------------------------------+

  In the following, <<<$XPJAR>>> should be replaced by the full path to the JAR file

* Starting the server

+------------------------------------------+
  jar -jar $XPJAR server --configuration $CONFFILE --nb-threads <max. number of threads>
+------------------------------------------+

* Adding data

+------------------------------------------+
  create-data --id '''ID''' --mode '''MODE''' --xmlrpc-file $CONFFILE
+------------------------------------------+

  where
  
  * <<<ID>>> : The resource identifier
  
  * <<<MODE>>> : The locking mode  <<<truc>>>:  blah blah

* Adding a job

+------------------------------------------+
  add-job --xmlrpc-file $CONFFILE --basename '''ID''' '''CMD'''
+------------------------------------------+

  where:
  
  * <<<ID>>>: the base name of the job to be added
  
  * <<<CMD>>>: the command line to execute