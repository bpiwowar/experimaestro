plugins {
    // Typescript
    id "de.richsource.gradle.plugins.typescript" version "1.8.0"
    id "com.moowork.node" version "0.12"

    // Access to git information
    id 'org.ajoberstar.grgit' version '1.2.0'
}

import com.moowork.gradle.node.NodeExtension
import com.moowork.gradle.node.variant.VariantBuilder

apply plugin: 'java'
apply plugin: 'idea'
sourceCompatibility = 1.8
targetCompatibility = 1.8

description = 'experimaestro server'

apply plugin: 'application'

def generatedResources = "$buildDir/classes/main"

node {
    // Download node for typescript compilation
    download = true
}

repositories {
    mavenLocal()

    maven { url "http://repo.maven.apache.org/maven2" }
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
}


sourceSets {
    main {
        output.resourcesDir = generatedResources
    }
}

test {
    testLogging {
        events "failed"
        exceptionFormat "full"
        showStackTraces true
    }
}

String nodeExecutable() {
    NodeExtension nodeExt = NodeExtension.get(project)
    return new VariantBuilder(nodeExt).build().nodeExec
}


compileTypeScript {
    compilerExecutable "${nodeExecutable()} node_modules/typescript/lib/tsc.js"
    dependsOn "npmInstall"
    outFile = file("${generatedResources}/web/js/xpm.js")
    target = "ES5"
}

dependencies {
    compile project(':jsch-nio')

    // Web & JsonRPC server
    compile group: 'org.eclipse.jetty', name: 'jetty-server', version: '9.4.0.v20161208'
    compile group: 'org.eclipse.jetty', name: 'jetty-security', version: '9.4.0.v20161208'
    compile group: 'org.eclipse.jetty', name: 'jetty-servlet', version: '9.4.0.v20161208'
    compile group: 'org.eclipse.jetty.websocket', name: 'websocket-servlet', version: '9.4.0.v20161208'
    compile group: 'org.eclipse.jetty.websocket', name: 'websocket-server', version: '9.4.0.v20161208'

    compile group: 'org.apache.xmlrpc', name: 'xmlrpc-client', version: '3.1.3'
    compile group: 'org.apache.xmlrpc', name: 'xmlrpc-server', version: '3.1.3'

    // Command line
    compile group: 'net.bpiwowar', name: 'argj', version: '1.1.4'

    // logging
    compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.8.1'
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.8.1'

    // Database
    compile group: 'org.hsqldb', name: 'hsqldb', version: '2.3.4'
    compile group: 'org.apache.commons', name: 'commons-dbcp2', version: '2.1.1'

    // SSH / SFTP
    compile group: 'com.github.jnr', name: 'jnr-unixsocket', version: '0.3'

    // General purpose modules
    compile group: 'it.unimi.dsi', name: 'fastutil', version: '6.5.15'
    compile group: 'com.google.guava', name: 'guava', version: '18.0'
    compile group: 'org.apache.commons', name: 'commons-compress', version: '1.4.1'
    compile group: 'commons-configuration', name: 'commons-configuration', version: '1.6'
    compile group: 'net.sf.saxon', name: 'Saxon-HE', version: '9.5.1-6'
    compile group: 'net.bpiwowar', name: 'fson', version:'2.3.2-SNAPSHOT'

    // Test modules
    testCompile group: 'org.testng', name: 'testng', version: '6.9.4'
    testCompile group: 'org.apache.sshd', name: 'sshd-core', version: '0.14.0'
    testCompile group: 'org.bouncycastle', name: 'bcprov-jdk16', version: '1.46'
    testCompile group: 'com.thetransactioncompany', name: 'jsonrpc2-client', version: '1.15'
}



import org.ajoberstar.grgit.Grgit

task printHeadHash {
    doLast {
        def git = Grgit.open(project.file('..'))

        println git.head().id
        println git.head().author
        println git.head().shortMessage
        println git.tag.list()
    }
}

mainClassName = 'bpiwowar.experiments.Run'

ext {
    try {
        // Open the Git repository in the main directory.
        git = org.ajoberstar.grgit.Grgit.open(file('..'))
        git_head = git.head()
    } catch(Throwable t) {
        git_head = null
    }
}

applicationDistribution.from("scripts") {
    into "bin"
}

task gitVersion(type: Copy) {
    from 'src/dist'
    include 'VERSION'
    into 'build/classes/main'
    expand(
            buildDate: new Date(),
            version: project.version,
            appName: applicationName,
            git_commit_id: git_head != null ? git_head.id : "unknown",
            git_dirty: false,
            git_commit_message_short: git_head != null ?  git_head.shortMessage : "unknown",
            git_commit_time: git_head != null ? git_head.time : "unknown",
            git_branch: git_head != null ? git.branch.current.name : "unknown",
            git_tags: "",
            git_remote_origin_url: "",

    )
}
compileJava.dependsOn gitVersion

task(server, dependsOn: ['classes', 'compileTypeScript'], type: JavaExec) {
    main = 'bpiwowar.experiments.Run'
    classpath = sourceSets.main.runtimeClasspath
    args 'server'
}

test.useTestNG()
